
// Initialization:
Start by initializing the vector of distances to all neighboring nodes. Thus, for each router, 
keep track of a vector which stores an estimate time it takes to send a packet to each neighbor.

// Send:
Each router sends this vector to all neighboring routers.

// Receive:


Start with a single router, which we define as the source. (it can be arbitrarily chosen.)

Then, 





A distributed variant of the Bellman–Ford algorithm is used in distance-vector routing protocols, for example the Routing Information Protocol (RIP). The algorithm is distributed because it involves a number of nodes (routers) within an Autonomous system, a collection of IP networks typically owned by an ISP. It consists of the following steps:
Each node calculates the distances between itself and all other nodes within the AS and stores this information as a table.
Each node sends its table to all neighboring nodes.
When a node receives distance tables from its neighbors, it calculates the shortest routes to all other nodes and updates its own table to reflect any changes.
The main disadvantages of the Bellman–Ford algorithm in this setting are as follows:
It does not scale well.
Changes in network topology are not reflected quickly since updates are spread node-by-node.
Count to infinity if link or node failures render a node unreachable from some set of other nodes, those nodes may spend forever gradually increasing their estimates of the distance to it, and in the meantime there may be routing loops.




Useful source:
http://homes.cs.washington.edu/~arvind/cs425/lectureNotes/route-6.pdf 
